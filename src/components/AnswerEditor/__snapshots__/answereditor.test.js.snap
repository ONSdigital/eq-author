// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Checkbox 1`] = `
.c12 {
  color: #c3c3c3;
  border: none;
  background: transparent;
  cursor: pointer;
  -webkit-transition: color .2s ease-in;
  transition: color .2s ease-in;
  font-size: 2em;
  padding: .3em;
}

.c12:hover {
  color: #35414D;
  -webkit-transition: color .2s ease-out;
  transition: color .2s ease-out;
}

.c5 {
  padding: 0.7em;
  width: 100%;
  display: block;
  border-radius: 2px;
  border: 1px solid #EAEAEA;
  font-size: 0.9em;
  display: inline-block;
  width: 1.1em;
  height: 1.1em;
  padding: 0;
  margin: 0 1em 0 0;
  vertical-align: middle;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  font-size: 1em;
}

.c5:focus {
  outline: none;
  border: 1px solid #61BDE0;
}

.c5:checked {
  background: url(icon-checkbox.svg) no-repeat center;
  background-size: 0.8em auto;
}

.c3 {
  display: block;
  width: 100%;
  margin-bottom: 1em;
  position: relative;
}

.c7 {
  border: none;
  padding: 0;
  color: #35414D;
  outline: none;
  display: block;
  width: 100%;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
  font-size: 1.125em;
  font-weight: 700;
}

.c7:focus {
  outline: none;
}

.c7::-webkit-input-placeholder {
  color: #a3a3a3;
}

.c7::-moz-placeholder {
  color: #a3a3a3;
}

.c7:-ms-input-placeholder {
  color: #a3a3a3;
}

.c7::placeholder {
  color: #a3a3a3;
}

.c8 {
  border: none;
  padding: 0;
  color: #35414D;
  outline: none;
  display: block;
  width: 100%;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
  font-size: 0.875em;
}

.c8:focus {
  outline: none;
}

.c8::-webkit-input-placeholder {
  color: #a3a3a3;
}

.c8::-moz-placeholder {
  color: #a3a3a3;
}

.c8:-ms-input-placeholder {
  color: #a3a3a3;
}

.c8::placeholder {
  color: #a3a3a3;
}

.c9 {
  resize: none;
}

.c10 {
  padding: 0.8em 3em;
  border-radius: 2px;
  font-size: 0.8em;
  font-weight: 400;
  cursor: pointer;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -webkit-transition: background-color 200ms ease-out;
  transition: background-color 200ms ease-out;
  -webkit-letter-spacing: -0.2px;
  -moz-letter-spacing: -0.2px;
  -ms-letter-spacing: -0.2px;
  letter-spacing: -0.2px;
  position: relative;
  overflow: hidden;
  background-color: white;
  color: #4A4A4A;
  border: 1px #EAEAEA solid;
}

.c10:focus,
.c10:active {
  outline: none;
}

.c10[disabled] {
  pointer-events: none;
  opacity: 0.6;
}

.c10:focus,
.c10:hover {
  background-color: #EAEAEA;
}

.c4 {
  border: 2px solid #EAEAEA;
  height: 1.4em;
  width: 1.4em;
}

.c2 {
  border: 1px solid #EAEAEA;
  padding: 1em 1em 0 1em;
  border-radius: 3px;
  position: relative;
}

.c2:not(:first-child) {
  margin-top: .5em;
}

.c2.option-enter {
  opacity: 0;
  height: 0;
  -webkit-transform: translateX(-20px);
  -ms-transform: translateX(-20px);
  transform: translateX(-20px);
}

.c2.option-enter-active {
  -webkit-transition: height 100ms ease-out,opacity 100ms ease-out 100ms,-webkit-transform 100ms ease-out 100ms;
  -webkit-transition: height 100ms ease-out,opacity 100ms ease-out 100ms,transform 100ms ease-out 100ms;
  transition: height 100ms ease-out,opacity 100ms ease-out 100ms,transform 100ms ease-out 100ms;
  opacity: 1;
  height: 5.625em;
  -webkit-transform: translateX(0);
  -ms-transform: translateX(0);
  transform: translateX(0);
}

.c2.option-exit {
  opacity: 1;
  height: 5.625em;
  -webkit-transform: translateX(0);
  -ms-transform: translateX(0);
  transform: translateX(0);
}

.c2.option-exit-active {
  -webkit-transition: opacity 100ms ease-out,-webkit-transform 100ms ease-out,height 100ms ease-out 100ms;
  -webkit-transition: opacity 100ms ease-out,transform 100ms ease-out,height 100ms ease-out 100ms;
  transition: opacity 100ms ease-out,transform 100ms ease-out,height 100ms ease-out 100ms;
  opacity: 0;
  height: 0;
  -webkit-transform: translateX(-20px);
  -ms-transform: translateX(-20px);
  transform: translateX(-20px);
}

.c6 {
  display: inline-block !important;
  width: auto;
  vertical-align: middle;
}

.c0 {
  width: 20em;
  margin: 0;
}

.c1 {
  margin: 0 0 1em 0;
}

.c11 {
  position: absolute;
  right: .5em;
  top: .4em;
}

<AnswerEditor
  answer={
    Object {
      "description": "",
      "id": 1,
      "options": Array [
        Object {
          "description": "",
          "id": 1,
          "label": "",
        },
      ],
      "title": "",
      "type": "Checkbox",
    }
  }
  onAddOption={[Function]}
  onBlur={[Function]}
  onChange={[Function]}
  onDeleteAnswer={[Function]}
  onDeleteOption={[Function]}
  onEntered={[Function]}
  onFocus={[Function]}
  onUpdateOption={[Function]}
>
  <div>
    <CheckboxAnswer
      answer={
        Object {
          "description": "",
          "id": 1,
          "options": Array [
            Object {
              "description": "",
              "id": 1,
              "label": "",
            },
          ],
          "title": "",
          "type": "Checkbox",
        }
      }
      onAddOption={[Function]}
      onChange={[Function]}
      onDeleteOption={[Function]}
      onFocus={[Function]}
      onUpdateOption={[Function]}
    >
      <CheckboxAnswer__CheckboxAnswerWrapper>
        <div
          className="c0"
        >
          <TransitionGroup
            childFactory={[Function]}
            component={[Function]}
          >
            <CheckboxAnswer__CheckboxOptions>
              <div
                className="c1"
              >
                <CSSTransition
                  classNames="option"
                  in={true}
                  onExited={[Function]}
                  timeout={200}
                >
                  <Transition
                    appear={false}
                    enter={true}
                    exit={true}
                    in={true}
                    mountOnEnter={false}
                    onEnter={[Function]}
                    onEntered={[Function]}
                    onEntering={[Function]}
                    onExit={[Function]}
                    onExited={[Function]}
                    onExiting={[Function]}
                    timeout={200}
                    unmountOnExit={false}
                  >
                    <CheckboxOption
                      hasDeleteButton={false}
                      onAddOption={[Function]}
                      onChange={[Function]}
                      onDelete={[Function]}
                      onDeleteOption={[Function]}
                      onFocus={[Function]}
                      option={
                        Object {
                          "description": "",
                          "id": 1,
                          "label": "",
                        }
                      }
                    >
                      <CheckboxOption__StyledCheckboxOption>
                        <div
                          className="c2"
                        >
                          <Field
                            id="label"
                          >
                            <Field__StyledField>
                              <div
                                className="c3"
                              >
                                <CheckboxOption__StyledCheckboxInput
                                  disabled={true}
                                  id="label"
                                  type="checkbox"
                                >
                                  <withChangeHandler(Input)
                                    className="c4"
                                    disabled={true}
                                    id="label"
                                    type="checkbox"
                                  >
                                    <Input
                                      className="c4"
                                      disabled={true}
                                      id="label"
                                      onChange={[Function]}
                                      type="checkbox"
                                    >
                                      <Input__StyledInput
                                        className="c4"
                                        disabled={true}
                                        id="label"
                                        name="label"
                                        onChange={[Function]}
                                        type="checkbox"
                                      >
                                        <input
                                          className="c4 c5"
                                          disabled={true}
                                          id="label"
                                          name="label"
                                          onChange={[Function]}
                                          type="checkbox"
                                        />
                                      </Input__StyledInput>
                                    </Input>
                                  </withChangeHandler(Input)>
                                </CheckboxOption__StyledCheckboxInput>
                                <CheckboxOption__SeamlessLabel
                                  data-autoFocus={true}
                                  id="label"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  placeholder="Label"
                                  size="medium"
                                  value=""
                                >
                                  <withSeamlessness(withChangeHandler(Input))
                                    className="c6"
                                    data-autoFocus={true}
                                    focused={false}
                                    id="label"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    optional={false}
                                    placeholder="Label"
                                    size="medium"
                                    value=""
                                  >
                                    <withSeamlessness__StyledSeamless
                                      className="c6"
                                      data-autoFocus={true}
                                      name="label"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      placeholder="Label"
                                      size="medium"
                                      value=""
                                    >
                                      <withChangeHandler(Input)
                                        className="c6 c7"
                                        data-autoFocus={true}
                                        name="label"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        placeholder="Label"
                                        size="medium"
                                        value=""
                                      >
                                        <Input
                                          className="c6 c7"
                                          data-autoFocus={true}
                                          name="label"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          placeholder="Label"
                                          size="medium"
                                          value=""
                                        >
                                          <input
                                            className="c6 c7"
                                            data-autoFocus={true}
                                            name="label"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            placeholder="Label"
                                            size="medium"
                                            type="text"
                                            value=""
                                          />
                                        </Input>
                                      </withChangeHandler(Input)>
                                    </withSeamlessness__StyledSeamless>
                                  </withSeamlessness(withChangeHandler(Input))>
                                </CheckboxOption__SeamlessLabel>
                              </div>
                            </Field__StyledField>
                          </Field>
                          <Field
                            id="description"
                          >
                            <Field__StyledField>
                              <div
                                className="c3"
                              >
                                <withSeamlessness(withChangeHandler(SeamlessTextArea__TextArea))
                                  cols="30"
                                  focused={false}
                                  id="description"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  optional={false}
                                  placeholder="Optional description"
                                  rows="5"
                                  size="small"
                                  value=""
                                >
                                  <withSeamlessness__StyledSeamless
                                    cols="30"
                                    name="description"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    placeholder="Optional description"
                                    rows="5"
                                    size="small"
                                    value=""
                                  >
                                    <withChangeHandler(SeamlessTextArea__TextArea)
                                      className="c8"
                                      cols="30"
                                      name="description"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      placeholder="Optional description"
                                      rows="5"
                                      size="small"
                                      value=""
                                    >
                                      <SeamlessTextArea__TextArea
                                        className="c8"
                                        cols="30"
                                        name="description"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        placeholder="Optional description"
                                        rows="5"
                                        size="small"
                                        value=""
                                      >
                                        <TextareaAutosize
                                          className="c8 c9"
                                          cols="30"
                                          name="description"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onHeightChange={[Function]}
                                          placeholder="Optional description"
                                          rows="5"
                                          size="small"
                                          useCacheForDOMMeasurements={false}
                                          value=""
                                        >
                                          <textarea
                                            className="c8 c9"
                                            cols="30"
                                            name="description"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            placeholder="Optional description"
                                            rows="5"
                                            size="small"
                                            style={
                                              Object {
                                                "height": 0,
                                              }
                                            }
                                            value=""
                                          />
                                        </TextareaAutosize>
                                      </SeamlessTextArea__TextArea>
                                    </withChangeHandler(SeamlessTextArea__TextArea)>
                                  </withSeamlessness__StyledSeamless>
                                </withSeamlessness(withChangeHandler(SeamlessTextArea__TextArea))>
                              </div>
                            </Field__StyledField>
                          </Field>
                        </div>
                      </CheckboxOption__StyledCheckboxOption>
                    </CheckboxOption>
                  </Transition>
                </CSSTransition>
              </div>
            </CheckboxAnswer__CheckboxOptions>
          </TransitionGroup>
          <div>
            <Button
              onClick={[Function]}
              secondary={true}
              type="button"
            >
              <Button__StyledButton
                onClick={[Function]}
                secondary={true}
                type="button"
              >
                <button
                  className="c10"
                  onClick={[Function]}
                  type="button"
                >
                  Add another option
                </button>
              </Button__StyledButton>
            </Button>
          </div>
        </div>
      </CheckboxAnswer__CheckboxAnswerWrapper>
    </CheckboxAnswer>
    <AnswerEditor__AnswerDeleteButton
      onClick={[Function]}
      title="Delete answer"
      type="button"
    >
      <DeleteButton
        className="c11"
        onClick={[Function]}
        size="medium"
        title="Delete answer"
        type="button"
      >
        <DeleteButton__StyledDeleteButton
          className="c11"
          onClick={[Function]}
          size="medium"
          title="Delete answer"
          type="button"
        >
          <button
            className="c11 c12"
            onClick={[Function]}
            size="medium"
            title="Delete answer"
            type="button"
          >
            ×
          </button>
        </DeleteButton__StyledDeleteButton>
      </DeleteButton>
    </AnswerEditor__AnswerDeleteButton>
  </div>
</AnswerEditor>
`;

exports[`Textfield 1`] = `
.c6 {
  color: #c3c3c3;
  border: none;
  background: transparent;
  cursor: pointer;
  -webkit-transition: color .2s ease-in;
  transition: color .2s ease-in;
  font-size: 2em;
  padding: .3em;
}

.c6:hover {
  color: #35414D;
  -webkit-transition: color .2s ease-out;
  transition: color .2s ease-out;
}

.c4 {
  padding: 0.7em;
  width: 100%;
  display: block;
  border-radius: 2px;
  border: 1px solid #EAEAEA;
  font-size: 0.9em;
}

.c4:focus {
  outline: none;
  border: 1px solid #61BDE0;
}

.c0 {
  display: block;
  width: 100%;
  margin-bottom: 1em;
  position: relative;
}

.c1 {
  border: none;
  padding: 0;
  color: #35414D;
  outline: none;
  display: block;
  width: 100%;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
  font-size: 1.125em;
  font-weight: 700;
}

.c1:focus {
  outline: none;
}

.c1::-webkit-input-placeholder {
  color: #a3a3a3;
}

.c1::-moz-placeholder {
  color: #a3a3a3;
}

.c1:-ms-input-placeholder {
  color: #a3a3a3;
}

.c1::placeholder {
  color: #a3a3a3;
}

.c2 {
  border: none;
  padding: 0;
  color: #35414D;
  outline: none;
  display: block;
  width: 100%;
  -webkit-transition: opacity 200ms ease-out;
  transition: opacity 200ms ease-out;
  font-size: 0.875em;
}

.c2:focus {
  outline: none;
}

.c2::-webkit-input-placeholder {
  color: #a3a3a3;
}

.c2::-moz-placeholder {
  color: #a3a3a3;
}

.c2:-ms-input-placeholder {
  color: #a3a3a3;
}

.c2::placeholder {
  color: #a3a3a3;
}

.c3 {
  resize: none;
}

.c5 {
  position: absolute;
  right: .5em;
  top: .4em;
}

<AnswerEditor
  answer={
    Object {
      "description": "",
      "id": 1,
      "title": "",
      "type": "TextField",
    }
  }
  onAddOption={[Function]}
  onBlur={[Function]}
  onChange={[Function]}
  onDeleteAnswer={[Function]}
  onDeleteOption={[Function]}
  onEntered={[Function]}
  onFocus={[Function]}
  onUpdateOption={[Function]}
>
  <div>
    <TextAnswer
      answer={
        Object {
          "description": "",
          "id": 1,
          "title": "",
          "type": "TextField",
        }
      }
      onAddOption={[Function]}
      onChange={[Function]}
      onDeleteOption={[Function]}
      onFocus={[Function]}
      onUpdateOption={[Function]}
    >
      <div>
        <Field
          id="label"
        >
          <Field__StyledField>
            <div
              className="c0"
            >
              <withSeamlessness(withChangeHandler(Input))
                data-autoFocus={true}
                focused={false}
                id="label"
                onBlur={[Function]}
                onChange={[Function]}
                optional={false}
                placeholder="Label"
                size="medium"
              >
                <withSeamlessness__StyledSeamless
                  data-autoFocus={true}
                  name="label"
                  onBlur={[Function]}
                  onChange={[Function]}
                  placeholder="Label"
                  size="medium"
                >
                  <withChangeHandler(Input)
                    className="c1"
                    data-autoFocus={true}
                    name="label"
                    onBlur={[Function]}
                    onChange={[Function]}
                    placeholder="Label"
                    size="medium"
                  >
                    <Input
                      className="c1"
                      data-autoFocus={true}
                      name="label"
                      onBlur={[Function]}
                      onChange={[Function]}
                      placeholder="Label"
                      size="medium"
                    >
                      <input
                        className="c1"
                        data-autoFocus={true}
                        name="label"
                        onBlur={[Function]}
                        onChange={[Function]}
                        placeholder="Label"
                        size="medium"
                        type="text"
                      />
                    </Input>
                  </withChangeHandler(Input)>
                </withSeamlessness__StyledSeamless>
              </withSeamlessness(withChangeHandler(Input))>
            </div>
          </Field__StyledField>
        </Field>
        <Field
          id="description"
        >
          <Field__StyledField>
            <div
              className="c0"
            >
              <withSeamlessness(withChangeHandler(SeamlessTextArea__TextArea))
                cols="30"
                focused={false}
                id="description"
                onBlur={[Function]}
                onChange={[Function]}
                optional={false}
                placeholder="Enter a description (optional)…"
                rows="5"
                size="small"
                value=""
              >
                <withSeamlessness__StyledSeamless
                  cols="30"
                  name="description"
                  onBlur={[Function]}
                  onChange={[Function]}
                  placeholder="Enter a description (optional)…"
                  rows="5"
                  size="small"
                  value=""
                >
                  <withChangeHandler(SeamlessTextArea__TextArea)
                    className="c2"
                    cols="30"
                    name="description"
                    onBlur={[Function]}
                    onChange={[Function]}
                    placeholder="Enter a description (optional)…"
                    rows="5"
                    size="small"
                    value=""
                  >
                    <SeamlessTextArea__TextArea
                      className="c2"
                      cols="30"
                      name="description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      placeholder="Enter a description (optional)…"
                      rows="5"
                      size="small"
                      value=""
                    >
                      <TextareaAutosize
                        className="c2 c3"
                        cols="30"
                        name="description"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onHeightChange={[Function]}
                        placeholder="Enter a description (optional)…"
                        rows="5"
                        size="small"
                        useCacheForDOMMeasurements={false}
                        value=""
                      >
                        <textarea
                          className="c2 c3"
                          cols="30"
                          name="description"
                          onBlur={[Function]}
                          onChange={[Function]}
                          placeholder="Enter a description (optional)…"
                          rows="5"
                          size="small"
                          style={
                            Object {
                              "height": 0,
                            }
                          }
                          value=""
                        />
                      </TextareaAutosize>
                    </SeamlessTextArea__TextArea>
                  </withChangeHandler(SeamlessTextArea__TextArea)>
                </withSeamlessness__StyledSeamless>
              </withSeamlessness(withChangeHandler(SeamlessTextArea__TextArea))>
            </div>
          </Field__StyledField>
        </Field>
        <withChangeHandler(Input)
          disabled={true}
        >
          <Input
            disabled={true}
            onChange={[Function]}
            type="text"
          >
            <Input__StyledInput
              disabled={true}
              onChange={[Function]}
              type="text"
            >
              <input
                className="c4"
                disabled={true}
                onChange={[Function]}
                type="text"
              />
            </Input__StyledInput>
          </Input>
        </withChangeHandler(Input)>
      </div>
    </TextAnswer>
    <AnswerEditor__AnswerDeleteButton
      onClick={[Function]}
      title="Delete answer"
      type="button"
    >
      <DeleteButton
        className="c5"
        onClick={[Function]}
        size="medium"
        title="Delete answer"
        type="button"
      >
        <DeleteButton__StyledDeleteButton
          className="c5"
          onClick={[Function]}
          size="medium"
          title="Delete answer"
          type="button"
        >
          <button
            className="c5 c6"
            onClick={[Function]}
            size="medium"
            title="Delete answer"
            type="button"
          >
            ×
          </button>
        </DeleteButton__StyledDeleteButton>
      </DeleteButton>
    </AnswerEditor__AnswerDeleteButton>
  </div>
</AnswerEditor>
`;
