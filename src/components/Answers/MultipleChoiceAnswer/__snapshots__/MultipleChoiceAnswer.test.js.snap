// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MultipleChoiceAnswer other option and answer should render other 1`] = `
<Connect(withEntityEditor(StatelessBasicAnswer))
  answer={
    Object {
      "id": "0",
      "options": Array [
        Object {
          "description": "",
          "id": 0,
          "label": "",
        },
        Object {
          "description": "",
          "id": 1,
          "label": "",
        },
      ],
      "other": Object {
        "answer": Object {
          "id": "1",
          "options": Array [
            Object {
              "__typename": "Option",
              "description": "",
              "id": "1",
              "label": "",
            },
          ],
          "type": "TextField",
        },
        "option": Object {
          "__typename": "Option",
          "id": "2",
        },
      },
    }
  }
  autoFocus={false}
  labelText="Label (optional)"
  onUpdate={[Function]}
>
  <MultipleChoiceAnswer__AnswerWrapper>
    <TransitionGroup
      childFactory={[Function]}
      component={[Function]}
    >
      <OptionTransition
        key="0"
        timeout={200}
      >
        <Connect(withEntityEditor(StatelessOption))
          hasDeleteButton={true}
          onAddOption={[Function]}
          onAddOther={[Function]}
          onChange={[Function]}
          onDelete={[Function]}
          onDeleteOption={[Function]}
          onDeleteOther={[Function]}
          onEnterKey={[Function]}
          onUpdate={[Function]}
          option={
            Object {
              "description": "",
              "id": 0,
              "label": "",
            }
          }
          store={
            Object {
              "dispatch": [Function],
              "getState": [Function],
              "subscribe": [Function],
            }
          }
        />
      </OptionTransition>
      <OptionTransition
        key="1"
        timeout={200}
      >
        <Connect(withEntityEditor(StatelessOption))
          hasDeleteButton={true}
          onAddOption={[Function]}
          onAddOther={[Function]}
          onChange={[Function]}
          onDelete={[Function]}
          onDeleteOption={[Function]}
          onDeleteOther={[Function]}
          onEnterKey={[Function]}
          onUpdate={[Function]}
          option={
            Object {
              "description": "",
              "id": 1,
              "label": "",
            }
          }
          store={
            Object {
              "dispatch": [Function],
              "getState": [Function],
              "subscribe": [Function],
            }
          }
        />
      </OptionTransition>
      <OptionTransition
        key="2"
        timeout={200}
      >
        <Connect(withEntityEditor(StatelessOption))
          hasDeleteButton={true}
          labelPlaceholder="eg. Other"
          onAddOption={[Function]}
          onAddOther={[Function]}
          onChange={[Function]}
          onDelete={[Function]}
          onDeleteOption={[Function]}
          onDeleteOther={[Function]}
          onEnterKey={[Function]}
          onUpdate={[Function]}
          option={
            Object {
              "__typename": "Option",
              "id": "2",
            }
          }
          store={
            Object {
              "dispatch": [Function],
              "getState": [Function],
              "subscribe": [Function],
            }
          }
        >
          <MultipleChoiceAnswer__OtherAnswerWrapper
            data-test="other-answer"
          >
            <Connect(withEntityEditor(StatelessBasicAnswer))
              answer={
                Object {
                  "id": "1",
                  "options": Array [
                    Object {
                      "__typename": "Option",
                      "description": "",
                      "id": "1",
                      "label": "",
                    },
                  ],
                  "type": "TextField",
                }
              }
              bold={false}
              labelPlaceholder="eg. Please specify"
              labelText="Other label"
              onUpdate={[Function]}
              showDescription={false}
            />
          </MultipleChoiceAnswer__OtherAnswerWrapper>
        </Connect(withEntityEditor(StatelessOption))>
      </OptionTransition>
    </TransitionGroup>
    <div>
      <SplitButton
        dataTest="btn-add-option"
        onPrimaryAction={[Function]}
        onToggleOpen={[Function]}
        open={false}
        primaryText="Add another option"
      >
        <Dropdown>
          <MenuItem
            data-test="btn-add-option-other"
            disabled={true}
            onClick={[Function]}
          >
            Add "other" option
          </MenuItem>
        </Dropdown>
      </SplitButton>
    </div>
  </MultipleChoiceAnswer__AnswerWrapper>
</Connect(withEntityEditor(StatelessBasicAnswer))>
`;

exports[`MultipleChoiceAnswer should match snapshot 1`] = `
<Connect(withEntityEditor(StatelessBasicAnswer))
  answer={
    Object {
      "id": "0",
      "options": Array [
        Object {
          "__typename": "Option",
          "description": "",
          "id": "1",
          "label": "",
        },
      ],
    }
  }
  autoFocus={false}
  labelText="Label (optional)"
  onUpdate={[Function]}
>
  <MultipleChoiceAnswer__AnswerWrapper>
    <TransitionGroup
      childFactory={[Function]}
      component={[Function]}
    >
      <OptionTransition
        key="1"
        timeout={200}
      >
        <Connect(withEntityEditor(StatelessOption))
          hasDeleteButton={false}
          onAddOption={[Function]}
          onAddOther={[Function]}
          onChange={[Function]}
          onDelete={[Function]}
          onDeleteOption={[Function]}
          onDeleteOther={[Function]}
          onEnterKey={[Function]}
          onUpdate={[Function]}
          option={
            Object {
              "__typename": "Option",
              "description": "",
              "id": "1",
              "label": "",
            }
          }
          store={
            Object {
              "dispatch": [Function],
              "getState": [Function],
              "subscribe": [Function],
            }
          }
        />
      </OptionTransition>
    </TransitionGroup>
    <div>
      <SplitButton
        dataTest="btn-add-option"
        onPrimaryAction={[Function]}
        onToggleOpen={[Function]}
        open={false}
        primaryText="Add another option"
      >
        <Dropdown>
          <MenuItem
            data-test="btn-add-option-other"
            disabled={true}
            onClick={[Function]}
          >
            Add "other" option
          </MenuItem>
        </Dropdown>
      </SplitButton>
    </div>
  </MultipleChoiceAnswer__AnswerWrapper>
</Connect(withEntityEditor(StatelessBasicAnswer))>
`;
